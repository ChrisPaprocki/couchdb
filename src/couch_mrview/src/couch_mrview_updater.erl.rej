***************
*** 192,202 ****
              DocFun = fun
                  ({nil, Seq, _, _}, {SeqAcc, Results}) ->
                      {erlang:max(Seq, SeqAcc), Results};
-                 ({Id, Seq, Rev, deleted}, {SeqAcc, Results}) ->
-                     {erlang:max(Seq, SeqAcc), [{Id, Seq, Rev, []} | Results]};
                  ({Id, Seq, Rev, Doc}, {SeqAcc, Results}) ->
                      couch_stats:increment_counter([couchdb, mrview, map_doc]),
-                     {ok, Res} = couch_query_servers:map_doc_raw(QServer, Doc),
                      {erlang:max(Seq, SeqAcc), [{Id, Seq, Rev, Res} | Results]}
              end,
  
--- 199,236 ----
              DocFun = fun
                  ({nil, Seq, _, _}, {SeqAcc, Results}) ->
                      {erlang:max(Seq, SeqAcc), Results};
+                 ({Id, Seq, Rev, #doc{deleted=true, body=Body, meta=Meta}}, {SeqAcc, Results}) ->
+                     % _access needs deleted docs
+                     case IdxName of
+                         <<"_design/_access">> ->
+                             % splice in seq
+                             {Start, Rev1} = Rev,
+                             Doc = #doc{
+                                 id = Id,
+                                 revs = {Start, [Rev1]},
+                                 body = {make_deleted_body(Body, Meta, Seq)}, %% todo: only keep _access and add _seq
+                                 deleted = true
+                             },
+                             {ok, Res} = couch_query_servers:map_doc_raw(QServer, Doc),
+                             {erlang:max(Seq, SeqAcc), [{Id, Seq, Rev, Res} | Results]};
+                         _Else ->
+                             {erlang:max(Seq, SeqAcc), [{Id, Seq, Rev, []} | Results]}
+                         end;
                  ({Id, Seq, Rev, Doc}, {SeqAcc, Results}) ->
                      couch_stats:increment_counter([couchdb, mrview, map_doc]),
+                     % couch_log:info("~nIdxName: ~p, Doc: ~p~n~n", [IdxName, Doc]),
+                     Doc0 = case IdxName of
+                         <<"_design/_access">> ->
+                             % splice in seq
+                             {Props} = Doc#doc.body,
+                             BodySp = couch_util:get_value(body_sp, Doc#doc.meta),
+                             Doc#doc{
+                                 body = {Props++[{<<"_seq">>, Seq}, {<<"_body_sp">>, BodySp}]}
+                             };
+                         _Else ->
+                             Doc
+                         end,
+                     {ok, Res} = couch_query_servers:map_doc_raw(QServer, Doc0),
                      {erlang:max(Seq, SeqAcc), [{Id, Seq, Rev, Res} | Results]}
              end,
  
